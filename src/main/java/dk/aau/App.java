/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dk.aau;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

import dk.aau.database.DatabaseManipulator;
import dk.aau.model.SafetyCriteriaModel;
import dk.aau.model.handlerSafetyCriteria.*;
import dk.aau.model.SafetyCriteriaModel;
import dk.aau.model.person.HealthcarePersonelModel;
import dk.aau.model.person.PatientModel;
import dk.aau.model.WarningsModel;

public class App {
    // tidshåndterings variabler 
    public static long days = (long) 7; // antallet af dage der kigged bagud
    public static String currentDate;
    public static String previousDate;
    public static String dateForAge;


    public static void main(String[] args) {

        // sætter tiden 
        LocalDateTime myDateObj = LocalDateTime.now();
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); 
        DateTimeFormatter formatForAge = DateTimeFormatter.ofPattern("yyMMdd");
        currentDate = myDateObj.format(myFormatObj);
        dateForAge = myDateObj.format(formatForAge);
        LocalDateTime a = myDateObj.minus(days, ChronoUnit.DAYS);
        previousDate = a.format(myFormatObj);

        //Patient instantieres
        PatientModel patientModel = new PatientModel(123456789);
        //System.out.println(patientModel.GetCpr());

        //Sikkerhedskriterier instantieres
        SafetyCriteriaModel laktat = new SafetyCriteriaModel("Laktat", 0);
        SafetyCriteriaModel fiO2 = new SafetyCriteriaModel("fiO2", 0);
        SafetyCriteriaModel peep = new SafetyCriteriaModel("PEEP", 0);
        SafetyCriteriaModel rass = new SafetyCriteriaModel("RASS", 0);
        SafetyCriteriaModel respRate = new SafetyCriteriaModel("Respiratory rate", 0);
        SafetyCriteriaModel saO2 = new SafetyCriteriaModel("SaO2", 0);
        SafetyCriteriaModel ventriRate = new SafetyCriteriaModel("Ventricular rate", 0);
        SafetyCriteriaModel endotrachealTube = new SafetyCriteriaModel("Endotracheal Tube", false);
        //System.out.println("FiO2 " + fiO2.getValueNumber());
        //System.out.println("Endotracheal Tube " + endotrachealTube.getValueBool());

        HandlerChokLaktatModel laktath = new HandlerChokLaktatModel();
        DatabaseManipulator.executeQueryWithResultSet(laktath);
        HandlerFiO2Model fio2h = new HandlerFiO2Model();
        DatabaseManipulator.executeQueryWithResultSet(fio2h); 
        HandlerPEEPModel peeph = new HandlerPEEPModel();
        DatabaseManipulator.executeQueryWithResultSet(peeph); 
        HandlerRASSModel rassh = new HandlerRASSModel();
        DatabaseManipulator.executeQueryWithResultSet(rassh); 
        HandlerRespRateModel resph = new HandlerRespRateModel();
        DatabaseManipulator.executeQueryWithResultSet(resph); 
        HandlerSaO2Model sao2h = new HandlerSaO2Model();
        DatabaseManipulator.executeQueryWithResultSet(sao2h); 
        HandlerVentriRateModel ventrih = new HandlerVentriRateModel();
        DatabaseManipulator.executeQueryWithResultSet(ventrih);     
        
        // Map instantieres
        HealthcarePersonelModel map = new HealthcarePersonelModel("Map", 0);

        System.out.println("FiO2 " + fiO2.getValueNumber());
        System.out.println("Endotracheal Tube " + endotrachealTube.getValueBool());

        // indsætter sikkerhedskriterne i listen scEPJ
        SafetyCriteriaModel.AddToListSc(laktat);
        SafetyCriteriaModel.AddToListSc(fiO2);
        SafetyCriteriaModel.AddToListSc(peep);
        SafetyCriteriaModel.AddToListSc(rass);
        SafetyCriteriaModel.AddToListSc(respRate);
        SafetyCriteriaModel.AddToListSc(saO2);
        SafetyCriteriaModel.AddToListSc(ventriRate);

        HealthcarePersonelModel.AddToListMapInterval(map);

        //int i = 0;

        // SafetyCriteria sc sammenlignes med alle instanser af SafetyCriteria i listen scEPJ for manglende resultater
        for (SafetyCriteriaModel sc : SafetyCriteriaModel.getScEPJ()) {
            if (sc.getValueNumber() == 0) {
                WarningsModel.AddToListMissingResultsForSCEPJ(sc);
                // sc.setValueNumber(i);
                // i++;
                System.out.println(sc.getName() + " " + "tilføjet til liste med manglende sikkerhedskriterier");
            }
            else if (sc.getValueNumber() > 0) {
                SafetyCriteriaModel.AddToListQuanti(sc);
                System.out.println(sc.getName() + " " + "tilføjet til liste med godkendte kvantiative sikkerhedskriterier");
            }
        }

        // SafetyCriteria sc sammenlignes med alle instanser af SafetyCriteria i listen scEPJ for urealistiske resultater
        for (SafetyCriteriaModel sc : SafetyCriteriaModel.getScEPJ()) {
            if (sc.getValueNumber() <= 0) {
                WarningsModel.AddToListUnrealisticResultsForSCEPJ(sc);
                //sc.setValueNumber(i);
                //i++;
                System.out.println(sc.getName() + " " + "tilføjet til liste med urealistiske sikkerhedskriterier");
            }
            else if (sc.getValueNumber() > 0) {
                SafetyCriteriaModel.AddToListQuanti(sc);
                System.out.println(sc.getName() + " " + "tilføjet til liste med godkendte kvantiative sikkerhedskriterier");
            }
        }

        // HealthCarePersonelModel hp sammenlignes med alle instanser af map i listen mapInterval for manglende resultater
        for (HealthcarePersonelModel hp : HealthcarePersonelModel.getMapInterval()) {
            if (hp.getValueNumber() == 0) {
                WarningsModel.AddToListMissingMAP(hp);
                //hp.setValueNumber(i);
                //i++;
                System.out.println(hp.getName() + " " + "tilføjet til liste med manglende MAP interval");
            }
            else if (hp.getValueNumber() > 0) {
                //SafetyCriteria.AddToListQuanti(sc);
                System.out.println(hp.getName() + " " + "tilføjet til liste med godkendte kvantiative sikkerhedskriterier");
            }
        }

        // HealthCarePersonelModel hp sammenlignes med alle instanser af map i listen mapInterval for urealistiske resultater
        for (HealthcarePersonelModel hp : HealthcarePersonelModel.getMapInterval()) {
            if (hp.getValueNumber() == 0) {
                WarningsModel.AddToListUnrealisticMAPInterval(hp);
                //hp.setValueNumber(i);
                //i++;
                System.out.println(hp.getName() + " " + "tilføjet til liste med urealistiske MAP interval");
            }
            else if (hp.getValueNumber() > 0) {
                //SafetyCriteria.AddToListQuanti(sc);
                System.out.println(hp.getName() + " " + "tilføjet til liste med godkendte kvantiative sikkerhedskriterier");
            }
        }

    }
}
